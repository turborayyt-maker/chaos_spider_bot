import os
import json
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# Logging configuration
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Global state
games = {}
STATE_FILE = "game_state.json"

# Game parameters
BOSS_MAX_HP = 100
PLAYERS_MAX_HP = 100
BOSS_NORMAL_DAMAGE = 10
BOSS_SPECIAL_DAMAGE = 20
PLAYER_NORMAL_DAMAGE = 10
FLAME_DAMAGE = 30
LIGHTNING_DAMAGE = 15
SHIELD_GAIN = 2

# Load state from file if exists
if os.path.exists(STATE_FILE):
    try:
        with open(STATE_FILE, 'r') as f:
            data = json.load(f)
            games = {int(k): v for k, v in data.items()}
            logger.info("Loaded game state from file.")
    except Exception as e:
        logger.error(f"Error loading state: {e}")

async def save_state():
    """Save games state to JSON file."""
    try:
        data = {str(k): v for k, v in games.items()}
        with open(STATE_FILE, 'w') as f:
            json.dump(data, f)
    except Exception as e:
        logger.error(f"Error saving state: {e}")

def init_game_state(chat_id: int):
    """Initialize game state for a new battle in the chat."""
    games[chat_id] = {
        "active": True,
        "boss_hp": BOSS_MAX_HP,
        "boss_max_hp": BOSS_MAX_HP,
        "players_hp": PLAYERS_MAX_HP,
        "players_max_hp": PLAYERS_MAX_HP,
        "shields": 0,
        "players_attack_count": 0,
        "special_charges": 0,
        "boss_actions_count": 0,
        "boss_skip": False,
        "damage_by_user": {},
        "user_names": {}
    }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command: start a new boss fight."""
    chat_id = update.effective_chat.id
    init_game_state(chat_id)
    await save_state()
    intro_text = (
        "üï∑Ô∏è –í –ø–µ—â–µ—Ä–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π –ü–∞—É–∫ –ø–æ –∏–º–µ–Ω–∏ *–ü–ª–µ—Ç—É—â–∏–π –ö–æ–Ω–µ—Ü*!\n"
        "–û–Ω —É–≥—Ä–æ–∂–∞–µ—Ç —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å—ë –≤–æ–∫—Ä—É–≥. –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —Å—Ä–∞–∑–∏—Ç—å –µ–≥–æ!\n\n"
        "‚öîÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n"
        "üí• /attack ‚Äì –æ–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞\n"
        "üî• /flame ‚Äì –æ–≥–Ω–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ (—Å–ø–µ—Ü)\n"
        "‚ö° /lightning ‚Äì –∞—Ç–∞–∫–∞ –º–æ–ª–Ω–∏–µ–π (—Å–ø–µ—Ü)\n"
        "üõ° /shield ‚Äì –∑–∞—â–∏—Ç–Ω—ã–π —â–∏—Ç (—Å–ø–µ—Ü)\n\n"
        "‚ÑπÔ∏è –ù–∞–∫–æ–ø–∏—Ç–µ 3 –æ–±—ã—á–Ω—ã—Ö –∞—Ç–∞–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–µ—Ü-–∞—Ç–∞–∫—É.\n"
        "–£ –∫–æ–º–∞–Ω–¥—ã –æ–±—â–∏–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ —â–∏—Ç—ã. –£–¥–∞—á–∏!"
    )
    # Send intro with image if available
    intro_image_path = "intro.jpg"
    if os.path.exists(intro_image_path):
        try:
            with open(intro_image_path, 'rb') as img:
                await update.message.reply_photo(photo=img, caption=intro_text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"Failed to send intro image: {e}")
            await update.message.reply_text(intro_text, parse_mode="Markdown")
    else:
        await update.message.reply_text(intro_text, parse_mode="Markdown")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /status command: show current HP and shields."""
    chat_id = update.effective_chat.id
    state = games.get(chat_id)
    if not state or not state.get("active"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–∏—Ç–≤—É.")
        return
    boss_hp = state["boss_hp"]
    players_hp = state["players_hp"]
    shields = state["shields"]
    lines = [
        f"‚ù§Ô∏è HP –ü–∞—É–∫: {boss_hp}/{state['boss_max_hp']}",
        f"‚ù§Ô∏è HP –ö–æ–º–∞–Ω–¥–∞: {players_hp}/{state['players_max_hp']}",
        f"üõ° –©–∏—Ç—ã: {shields}"
    ]
    if state["special_charges"] > 0:
        if state["special_charges"] == 1:
            lines.append("‚ú® –°–ø–µ—Ü-–∞—Ç–∞–∫–∞ –≥–æ—Ç–æ–≤–∞!")
        else:
            lines.append(f"‚ú® –°–ø–µ—Ü-–∞—Ç–∞–∫ –≥–æ—Ç–æ–≤–æ: {state['special_charges']}")
    else:
        count = state["players_attack_count"]
        lines.append(f"‚öîÔ∏è –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è —Å–ø–µ—Ü-–∞—Ç–∞–∫–∏: {count}/3")
    await update.message.reply_text("\n".join(lines))

async def handle_attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle a normal attack action (üí• or /attack)."""
    chat_id = update.effective_chat.id
    state = games.get(chat_id)
    if not state or not state.get("active"):
        await update.message.reply_text("–ë–∏—Ç–≤–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –±–æ—Å—Å–∞!")
        return
    user = update.effective_user
    user_name = user.first_name or "–ò–≥—Ä–æ–∫"
    # Player uses normal attack
    damage = PLAYER_NORMAL_DAMAGE
    state["boss_hp"] -= damage
    if state["boss_hp"] < 0:
        state["boss_hp"] = 0
    # Track damage by user
    state["damage_by_user"][user.id] = state["damage_by_user"].get(user.id, 0) + damage
    state["user_names"][user.id] = user_name
    # Increase special meter
    state["players_attack_count"] += 1
    special_unlocked = False
    if state["players_attack_count"] >= 3:
        state["players_attack_count"] -= 3
        state["special_charges"] += 1
        special_unlocked = True
    # Prepare result message for this action
    text_lines = []
    text_lines.append(f"üí• *{user_name}* –∞—Ç–∞–∫—É–µ—Ç –ü–∞—É–∫–∞, –Ω–∞–Ω–æ—Å—è {damage} —É—Ä–æ–Ω–∞.")
    # Check boss defeat
    if state["boss_hp"] <= 0:
        text_lines[-1] += " –ü–∞—É–∫ –ø–æ–≤–µ—Ä–∂–µ–Ω!"
        # Boss defeated, prepare end of fight summary
        state["active"] = False
        # Determine top damage dealer
        if state["damage_by_user"]:
            mvp_id = max(state["damage_by_user"], key=lambda uid: state["damage_by_user"][uid])
            mvp_damage = state["damage_by_user"][mvp_id]
            mvp_name = state["user_names"].get(mvp_id, "–ò–≥—Ä–æ–∫")
        else:
            mvp_id = None
            mvp_damage = 0
            mvp_name = ""
        # Reward text (could be customized or randomized)
        reward_text = "100 –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç –∏ 50 XP"
        text_lines.append(f"üèÜ *–ü–æ–±–µ–¥–∞!* –ü–∞—É–∫ {chr(0x1F577)} –ø–æ–≤–µ—Ä–∂–µ–Ω. –ù–∞–≥—Ä–∞–¥–∞: {reward_text}.")
        if mvp_id:
            text_lines.append(f"‚≠ê –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —É—Ä–æ–Ω–∞ –Ω–∞–Ω—ë—Å *{mvp_name}* ‚Äî {mvp_damage}.")
        # Send the messages
        await update.message.reply_text("\n".join(text_lines), parse_mode="Markdown")
        await save_state()
        return
    # Boss still alive, possibly announce special unlocked
    if special_unlocked:
        text_lines.append("‚ú® –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è —Å–ø–µ—Ü-–∞—Ç–∞–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã /flame, /lightning –∏–ª–∏ /shield.")
    # Boss's turn to attack (if not stunned by a prior lightning)
    if state.get("boss_skip"):
        # Boss skips this turn
        text_lines.append("üòµ –ü–∞—É–∫ –æ–≥–ª—É—à–µ–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ—é –∞—Ç–∞–∫—É!")
        state["boss_skip"] = False
    else:
        # Determine boss attack type (special or normal)
        state["boss_actions_count"] += 1
        if state["boss_actions_count"] % 4 == 0:
            # Boss uses special attack
            damage_to_players = BOSS_SPECIAL_DAMAGE
            boss_action_desc = "üï∑Ô∏è –ü–∞—É–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç *—è–¥–æ–≤–∏—Ç—ã–π —É–∫—É—Å*!"
            if state["shields"] > 0:
                # Shields absorb half damage but are destroyed
                damage_to_players = BOSS_SPECIAL_DAMAGE // 2
                boss_action_desc += " –©–∏—Ç—ã —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–≥–ª–æ—â–∞—é—Ç —É—Ä–æ–Ω, –Ω–æ –≤—Å–µ —â–∏—Ç—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!"
                state["shields"] = 0
            else:
                boss_action_desc += f" –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç {damage_to_players} —É—Ä–æ–Ω–∞."
            state["players_hp"] -= damage_to_players
            if state["players_hp"] < 0:
                state["players_hp"] = 0
            text_lines.append(boss_action_desc)
        else:
            # Boss uses normal attack
            damage_to_players = BOSS_NORMAL_DAMAGE
            boss_action_desc = "üï∑Ô∏è –ü–∞—É–∫ –∞—Ç–∞–∫—É–µ—Ç –∫–æ–º–∞–Ω–¥—É."
            if state["shields"] > 0:
                state["shields"] -= 1
                if state["shields"] < 0:
                    state["shields"] = 0
                boss_action_desc += " –©–∏—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç —É–¥–∞—Ä!"
                if state["shields"] > 0:
                    boss_action_desc += f" (–©–∏—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {state['shields']})"
                else:
                    boss_action_desc += " (–©–∏—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç)"
                damage_to_players = 0
            else:
                boss_action_desc += f" –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç {damage_to_players} —É—Ä–æ–Ω–∞."
            if damage_to_players > 0:
                state["players_hp"] -= damage_to_players
                if state["players_hp"] < 0:
                    state["players_hp"] = 0
            text_lines.append(boss_action_desc)
    # Check defeat of players
    if state["players_hp"] <= 0:
        state["players_hp"] = 0
        state["active"] = False
        text_lines.append("‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø–∞–ª–∞ –≤ –±–æ—é... –ü–∞—É–∫ –ø–æ–±–µ–¥–∏–ª. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
        await update.message.reply_text("\n".join(text_lines), parse_mode="Markdown")
        await save_state()
        return
    # If battle continues, append current HP status
    text_lines.append(f"‚ù§Ô∏è HP –ü–∞—É–∫: {state['boss_hp']}/{state['boss_max_hp']} | ‚ù§Ô∏è HP –ö–æ–º–∞–Ω–¥–∞: {state['players_hp']}/{state['players_max_hp']} | üõ° –©–∏—Ç—ã: {state['shields']}")
    # Send the message
    await update.message.reply_text("\n".join(text_lines), parse_mode="Markdown")
    # Save state to file
    await save_state()

async def handle_flame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle flame special attack (üî• or /flame)."""
    chat_id = update.effective_chat.id
    state = games.get(chat_id)
    if not state or not state.get("active"):
        await update.message.reply_text("–ë–æ–π –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    if state["special_charges"] <= 0:
        await update.message.reply_text("–°–ø–µ—Ü-–∞—Ç–∞–∫–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞!")
        return
    user = update.effective_user
    user_name = user.first_name or "–ò–≥—Ä–æ–∫"
    # Use a special charge
    state["special_charges"] -= 1
    # Player uses flame attack
    damage = FLAME_DAMAGE
    state["boss_hp"] -= damage
    if state["boss_hp"] < 0:
        state["boss_hp"] = 0
    # Track damage
    state["damage_by_user"][user.id] = state["damage_by_user"].get(user.id, 0) + damage
    state["user_names"][user.id] = user_name
    # Prepare message
    text_lines = []
    text_lines.append(f"üî• *{user_name}* –≤—ã–ø—É—Å–∫–∞–µ—Ç —Å—Ç–æ–ª–± –ø–ª–∞–º–µ–Ω–∏ –∏ –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞ –ü–∞—É–∫—É!")
    # Check boss defeat
    if state["boss_hp"] <= 0:
        text_lines[-1] += " –ü–∞—É–∫ –ø–æ–≤–µ—Ä–∂–µ–Ω!"
        state["active"] = False
        # Top damage dealer
        if state["damage_by_user"]:
            mvp_id = max(state["damage_by_user"], key=lambda uid: state["damage_by_user"][uid])
            mvp_damage = state["damage_by_user"][mvp_id]
            mvp_name = state["user_names"].get(mvp_id, "–ò–≥—Ä–æ–∫")
        else:
            mvp_id = None
            mvp_damage = 0
            mvp_name = ""
        reward_text = "100 –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç –∏ 50 XP"
        text_lines.append(f"üèÜ *–ü–æ–±–µ–¥–∞!* –ü–∞—É–∫ –ø–æ–≤–µ—Ä–∂–µ–Ω. –ù–∞–≥—Ä–∞–¥–∞: {reward_text}.")
        if mvp_id:
            text_lines.append(f"‚≠ê –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —É—Ä–æ–Ω–∞ –Ω–∞–Ω—ë—Å *{mvp_name}* ‚Äî {mvp_damage}.")
        await update.message.reply_text("\n".join(text_lines), parse_mode="Markdown")
        await save_state()
        return
    # Boss is still alive. Special attack used does not skip boss turn (no stun effect here).
    # Boss attacks after player's action (flame has no stun)
    if state.get("boss_skip"):
        text_lines.append("üòµ –ü–∞—É–∫ –æ–≥–ª—É—à–µ–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ—é –∞—Ç–∞–∫—É!")
        state["boss_skip"] = False
    else:
        state["boss_actions_count"] += 1
        if state["boss_actions_count"] % 4 == 0:
            # Boss special
            damage_to_players = BOSS_SPECIAL_DAMAGE
            boss_action_desc = "üï∑Ô∏è –ü–∞—É–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç *—è–¥–æ–≤–∏—Ç—ã–π —É–∫—É—Å*!"
            if state["shields"] > 0:
                damage_to_players = BOSS_SPECIAL_DAMAGE // 2
                boss_action_desc += " –©–∏—Ç—ã —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–≥–ª–æ—â–∞—é—Ç —É—Ä–æ–Ω, –Ω–æ –≤—Å–µ —â–∏—Ç—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!"
                state["shields"] = 0
            else:
                boss_action_desc += f" –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç {damage_to_players} —É—Ä–æ–Ω–∞."
            state["players_hp"] -= damage_to_players
            if state["players_hp"] < 0:
                state["players_hp"] = 0
            text_lines.append(boss_action_desc)
        else:
            damage_to_players = BOSS_NORMAL_DAMAGE
            boss_action_desc = "üï∑Ô∏è –ü–∞—É–∫ –∞—Ç–∞–∫—É–µ—Ç –∫–æ–º–∞–Ω–¥—É."
            if state["shields"] > 0:
                state["shields"] -= 1
                if state["shields"] < 0:
                    state["shields"] = 0
                boss_action_desc += " –©–∏—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç —É–¥–∞—Ä!"
                if state["shields"] > 0:
                    boss_action_desc += f" (–©–∏—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {state['shields']})"
                else:
                    boss_action_desc += " (–©–∏—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç)"
                damage_to_players = 0
            else:
                boss_action_desc += f" –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç {damage_to_players} —É—Ä–æ–Ω–∞."
            if damage_to_players > 0:
                state["players_hp"] -= damage_to_players
                if state["players_hp"] < 0:
                    state["players_hp"] = 0
            text_lines.append(boss_action_desc)
    # Check players defeat
    if state["players_hp"] <= 0:
        state["players_hp"] = 0
        state["active"] = False
        text_lines.append("‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø–∞–ª–∞ –≤ –±–æ—é... –ü–∞—É–∫ –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≤–∞–Ω—à–∞.")
        await update.message.reply_text("\n".join(text_lines), parse_mode="Markdown")
        await save_state()
        return
    # If battle continues, add status
    text_lines.append(f"‚ù§Ô∏è HP –ü–∞—É–∫: {state['boss_hp']}/{state['boss_max_hp']} | ‚ù§Ô∏è HP –ö–æ–º–∞–Ω–¥–∞: {state['players_hp']}/{state['players_max_hp']} | üõ° –©–∏—Ç—ã: {state['shields']}")
    await update.message.reply_text("\n".join(text_lines), parse_mode="Markdown")
    await save_state()

async def handle_lightning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle lightning special attack (‚ö° or /lightning)."""
    chat_id = update.effective_chat.id
    state = games.get(chat_id)
    if not state or not state.get("active"):
        await update.message.reply_text("–ë–æ–π –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    if state["special_charges"] <= 0:
        await update.message.reply_text("–°–ø–µ—Ü-–∞—Ç–∞–∫–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞!")
        return
    user = update.effective_user
    user_name = user.first_name or "–ò–≥—Ä–æ–∫"
    # Use special charge
    state["special_charges"] -= 1
    # Player uses lightning attack
    damage = LIGHTNING_DAMAGE
    state["boss_hp"] -= damage
    if state["boss_hp"] < 0:
        state["boss_hp"] = 0
    state["damage_by_user"][user.id] = state["damage_by_user"].get(user.id, 0) + damage
    state["user_names"][user.id] = user_name
    # Lightning stuns the boss (boss_skip set to True)
    state["boss_skip"] = True
    text_lines = []
    text_lines.append(f"‚ö° *{user_name}* –ø–æ—Ä–∞–∂–∞–µ—Ç –ü–∞—É–∫–∞ –º–æ–ª–Ω–∏–µ–π, –Ω–∞–Ω–æ—Å—è {damage} —É—Ä–æ–Ω–∞ –∏ –æ–≥–ª—É—à–∞—è –≤—Ä–∞–≥–∞!")
    if state["boss_hp"] <= 0:
        text_lines[-1] += " –ü–∞—É–∫ –ø–æ–≤–µ—Ä–∂–µ–Ω!"
        state["active"] = False
        if state["damage_by_user"]:
            mvp_id = max(state["damage_by_user"], key=lambda uid: state["damage_by_user"][uid])
            mvp_damage = state["damage_by_user"][mvp_id]
            mvp_name = state["user_names"].get(mvp_id, "–ò–≥—Ä–æ–∫")
        else:
            mvp_id = None
            mvp_damage = 0
            mvp_name = ""
        reward_text = "100 –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç –∏ 50 XP"
        text_lines.append(f"üèÜ *–ü–æ–±–µ–¥–∞!* –ü–∞—É–∫ –ø–æ–≤–µ—Ä–∂–µ–Ω. –ù–∞–≥—Ä–∞–¥–∞: {reward_text}.")
        if mvp_id:
            text_lines.append(f"‚≠ê –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —É—Ä–æ–Ω–∞ –Ω–∞–Ω—ë—Å *{mvp_name}* ‚Äî {mvp_damage}.")
        await update.message.reply_text("\n".join(text_lines), parse_mode="Markdown")
        await save_state()
        return
    # Boss is alive but stunned, so he skips attacking this turn
    text_lines.append("üòµ –ü–∞—É–∫ –æ–≥–ª—É—à–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç!")
    # (boss_skip True means we skip boss attack this turn)
    # Note: We do not increment boss_actions_count because boss missed this action.
    # Append status
    text_lines.append(f"‚ù§Ô∏è HP –ü–∞—É–∫: {state['boss_hp']}/{state['boss_max_hp']} | ‚ù§Ô∏è HP –ö–æ–º–∞–Ω–¥–∞: {state['players_hp']}/{state['players_max_hp']} | üõ° –©–∏—Ç—ã: {state['shields']}")
    await update.message.reply_text("\n".join(text_lines), parse_mode="Markdown")
    await save_state()

async def handle_shield(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle shield special (üõ° or /shield): increase team's shields."""
    chat_id = update.effective_chat.id
    state = games.get(chat_id)
    if not state or not state.get("active"):
        await update.message.reply_text("–ë–æ–π –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    if state["special_charges"] <= 0:
        await update.message.reply_text("–°–ø–µ—Ü-–∞—Ç–∞–∫–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞!")
        return
    user = update.effective_user
    user_name = user.first_name or "–ò–≥—Ä–æ–∫"
    # Use special charge
    state["special_charges"] -= 1
    # Increase shields
    state["shields"] += SHIELD_GAIN
    text_lines = []
    text_lines.append(f"üõ° *{user_name}* –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–π —â–∏—Ç! –©–∏—Ç—ã +{SHIELD_GAIN} (–∏—Ç–æ–≥–æ: {state['shields']}).")
    # Shield special does not deal damage, so boss not hurt.
    # Boss will attack as usual (shield does not stun).
    if state.get("boss_skip"):
        text_lines.append("üòµ –ü–∞—É–∫ –æ–≥–ª—É—à–µ–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ—é –∞—Ç–∞–∫—É!")
        state["boss_skip"] = False
    else:
        state["boss_actions_count"] += 1
        if state["boss_actions_count"] % 4 == 0:
            damage_to_players = BOSS_SPECIAL_DAMAGE
            boss_action_desc = "üï∑Ô∏è –ü–∞—É–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç *—è–¥–æ–≤–∏—Ç—ã–π —É–∫—É—Å*!"
            if state["shields"] > 0:
                damage_to_players = BOSS_SPECIAL_DAMAGE // 2
                boss_action_desc += " –©–∏—Ç—ã —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–≥–ª–æ—â–∞—é—Ç —É—Ä–æ–Ω, –Ω–æ –≤—Å–µ —â–∏—Ç—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!"
                state["shields"] = 0
            else:
                boss_action_desc += f" –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç {damage_to_players} —É—Ä–æ–Ω–∞."
            state["players_hp"] -= damage_to_players
            if state["players_hp"] < 0:
                state["players_hp"] = 0
            text_lines.append(boss_action_desc)
        else:
            damage_to_players = BOSS_NORMAL_DAMAGE
            boss_action_desc = "üï∑Ô∏è –ü–∞—É–∫ –∞—Ç–∞–∫—É–µ—Ç –∫–æ–º–∞–Ω–¥—É."
            if state["shields"] > 0:
                state["shields"] -= 1
                if state["shields"] < 0:
                    state["shields"] = 0
                boss_action_desc += " –©–∏—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç —É–¥–∞—Ä!"
                if state["shields"] > 0:
                    boss_action_desc += f" (–©–∏—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {state['shields']})"
                else:
                    boss_action_desc += " (–©–∏—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç)"
                damage_to_players = 0
            else:
                boss_action_desc += f" –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç {damage_to_players} —É—Ä–æ–Ω–∞."
            if damage_to_players > 0:
                state["players_hp"] -= damage_to_players
                if state["players_hp"] < 0:
                    state["players_hp"] = 0
            text_lines.append(boss_action_desc)
    # Check players defeat
    if state["players_hp"] <= 0:
        state["players_hp"] = 0
        state["active"] = False
        text_lines.append("‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø–∞–ª–∞ –≤ –±–æ—é... –ü–∞—É–∫ –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
        await update.message.reply_text("\n".join(text_lines), parse_mode="Markdown")
        await save_state()
        return
    # Continue fight: show status
    text_lines.append(f"‚ù§Ô∏è HP –ü–∞—É–∫: {state['boss_hp']}/{state['boss_max_hp']} | ‚ù§Ô∏è HP –ö–æ–º–∞–Ω–¥–∞: {state['players_hp']}/{state['players_max_hp']} | üõ° –©–∏—Ç—ã: {state['shields']}")
    await update.message.reply_text("\n".join(text_lines), parse_mode="Markdown")
    await save_state()

def main():
    # Retrieve bot token from environment
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN is not set. Please set the BOT_TOKEN environment variable.")
        return
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    # Register handlers for commands
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("attack", handle_attack))
    application.add_handler(CommandHandler("flame", handle_flame))
    application.add_handler(CommandHandler("lightning", handle_lightning))
    application.add_handler(CommandHandler("shield", handle_shield))
    # Register handlers for emoji as messages
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^üí•$'), handle_attack))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^üî•$'), handle_flame))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^‚ö°$'), handle_lightning))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^üõ°$'), handle_shield))
    # Run the bot
    application.run_polling()

if __name__ == "__main__":
    main()

