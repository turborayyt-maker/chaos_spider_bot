import os
import json
import logging

from dotenv import load_dotenv
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# =========================
# –õ–û–ì–ò
# =========================
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s", level=logging.INFO
)
logger = logging.getLogger("pletushiy_konez")

# =========================
# .ENV
# =========================
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

PORTAL_CHAT_ID_RAW = os.getenv("PORTAL_CHAT_ID", "").strip()
PORTAL_CHAT_ID = int(PORTAL_CHAT_ID_RAW) if PORTAL_CHAT_ID_RAW else None

OWNER_IDS = [
    int(x) for x in os.getenv("OWNER_IDS", "").replace(" ", "").split(",") if x.isdigit()
]

STATE_FILE = os.getenv("STATE_FILE", "game_state.json").strip()
INTRO_IMAGE_PATH = os.getenv("INTRO_IMAGE_PATH", "intro.jpg").strip()

# =========================
# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
# =========================
games = {}  # chat_id -> state

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—è (–ø—Ä–∏–º–µ—Ä—ã ‚Äî –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å –ø–æ–¥ –±–∞–ª–∞–Ω—Å)
BOSS_MAX_HP = 100
PLAYERS_MAX_HP = 100
BOSS_NORMAL_DAMAGE = 10
BOSS_SPECIAL_DAMAGE = 20
PLAYER_NORMAL_DAMAGE = 10
FLAME_DAMAGE = 30
LIGHTNING_DAMAGE = 15
SHIELD_GAIN = 2  # –ø—Ä–∏–±–∞–≤–∫–∞ ¬´–ø—Ä–æ—Å—Ç—ã—Ö¬ª —â–∏—Ç–æ–≤

# =========================
# –£–¢–ò–õ–ò–¢–´
# =========================
def is_owner(user_id: int) -> bool:
    return (not OWNER_IDS) or (user_id in OWNER_IDS)

def in_portal_chat(chat_id: int) -> bool:
    return (PORTAL_CHAT_ID is None) or (chat_id == PORTAL_CHAT_ID)

def init_game_state(chat_id: int):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å/—Å–±—Ä–æ—Å–∏—Ç—å –±–æ–π –≤ —á–∞—Ç–µ."""
    games[chat_id] = {
        "active": True,
        "boss_hp": BOSS_MAX_HP,
        "boss_max_hp": BOSS_MAX_HP,
        "players_hp": PLAYERS_MAX_HP,
        "players_max_hp": PLAYERS_MAX_HP,
        "shields": 0,
        "players_attack_count": 0,
        "special_charges": 0,
        "boss_actions_count": 0,
        "boss_skip": False,
        "damage_by_user": {},
        "user_names": {},
    }

def load_state_from_disk():
    global games
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            games = {int(k): v for k, v in data.items()}
            logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

async def save_state():
    try:
        data = {str(k): v for k, v in games.items()}
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

# =========================
# –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î
# =========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—è. –†–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–º —á–∞—Ç–µ; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤."""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if not in_portal_chat(chat_id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –ø–æ—Ä—Ç–∞–ª–∞.")
        return

    # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
    # if not is_owner(user_id):
    #     await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ–π.")
    #     return

    init_game_state(chat_id)
    await save_state()

    intro_text = (
        "üï∑Ô∏è –í –ø–µ—â–µ—Ä–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π –ü–∞—É–∫ –ø–æ –∏–º–µ–Ω–∏ *–ü–ª–µ—Ç—É—â–∏–π –ö–æ–Ω–µ—Ü*!\n"
        "–û–Ω —É–≥—Ä–æ–∂–∞–µ—Ç —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å—ë –≤–æ–∫—Ä—É–≥. –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —Å—Ä–∞–∑–∏—Ç—å –µ–≥–æ!\n\n"
        "‚öîÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n"
        "üí• /attack ‚Äì –æ–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞\n"
        "üî• /flame ‚Äì –æ–≥–Ω–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ (—Å–ø–µ—Ü)\n"
        "‚ö° /lightning ‚Äì –∞—Ç–∞–∫–∞ –º–æ–ª–Ω–∏–µ–π (—Å–ø–µ—Ü)\n"
        "üõ° /shield ‚Äì –∑–∞—â–∏—Ç–Ω—ã–π —â–∏—Ç (—Å–ø–µ—Ü)\n\n"
        "‚ÑπÔ∏è –ù–∞–∫–æ–ø–∏—Ç–µ 3 –æ–±—ã—á–Ω—ã—Ö –∞—Ç–∞–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–µ—Ü-–∞—Ç–∞–∫—É.\n"
        "–£ –∫–æ–º–∞–Ω–¥—ã –æ–±—â–∏–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ —â–∏—Ç—ã. –£–¥–∞—á–∏!"
    )

    if os.path.exists(INTRO_IMAGE_PATH):
        try:
            with open(INTRO_IMAGE_PATH, "rb") as img:
                await update.message.reply_photo(
                    photo=img, caption=intro_text, parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–Ω—Ç—Ä–æ: {e}")
            await update.message.reply_text(intro_text, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text(intro_text, parse_mode=ParseMode.MARKDOWN)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = games.get(chat_id)
    if not state or not state.get("active"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±–∏—Ç–≤—É.")
        return
    lines = [
        f"‚ù§Ô∏è HP –ü–∞—É–∫: {state['boss_hp']}/{state['boss_max_hp']}",
        f"‚ù§Ô∏è HP –ö–æ–º–∞–Ω–¥–∞: {state['players_hp']}/{state['players_max_hp']}",
        f"üõ° –©–∏—Ç—ã: {state['shields']}",
    ]
    if state["special_charges"] > 0:
        lines.append(f"‚ú® –°–ø–µ—Ü-–∞—Ç–∞–∫ –≥–æ—Ç–æ–≤–æ: {state['special_charges']}")
    else:
        lines.append(f"‚öîÔ∏è –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è —Å–ø–µ—Ü-–∞—Ç–∞–∫–∏: {state['players_attack_count']}/3")
    await update.message.reply_text("\n".join(lines))

# ==========
# –ò–≥—Ä–æ–∫: –æ–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞
# ==========
async def handle_attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = games.get(chat_id)
    if not state or not state.get("active"):
        await update.message.reply_text("–ë–∏—Ç–≤–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –±–æ—Å—Å–∞!")
        return

    user = update.effective_user
    user_name = user.first_name or "–ò–≥—Ä–æ–∫"

    # –£—Ä–æ–Ω –±–æ—Å—Å—É
    damage = PLAYER_NORMAL_DAMAGE
    state["boss_hp"] = max(0, state["boss_hp"] - damage)

    # –£—á—ë—Ç —É—Ä–æ–Ω–∞
    state["damage_by_user"][user.id] = state["damage_by_user"].get(user.id, 0) + damage
    state["user_names"][user.id] = user_name

    # –ó–∞—Ä—è–¥ —Å–ø–µ—Ü-–∞—Ç–∞–∫–∏
    state["players_attack_count"] += 1
    special_unlocked = False
    if state["players_attack_count"] >= 3:
        state["players_attack_count"] -= 3
        state["special_charges"] += 1
        special_unlocked = True

    text_lines = [f"üí• *{user_name}* –∞—Ç–∞–∫—É–µ—Ç –ü–∞—É–∫–∞, –Ω–∞–Ω–æ—Å—è {damage} —É—Ä–æ–Ω–∞."]

    # –ü–æ–±–µ–¥–∞?
    if state["boss_hp"] <= 0:
        await announce_victory(update, state, text_lines)
        await save_state()
        return

    if special_unlocked:
        text_lines.append("‚ú® –°–ø–µ—Ü-—ç–Ω–µ—Ä–≥–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∞! –î–æ—Å—Ç—É–ø–Ω—ã /flame, /lightning –∏–ª–∏ /shield.")

    # –•–æ–¥ –±–æ—Å—Å–∞
    await boss_turn(state, text_lines)

    # –ü—Ä–æ–∏–≥—Ä—ã—à?
    if state["players_hp"] <= 0:
        state["players_hp"] = 0
        state["active"] = False
        text_lines.append("‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø–∞–ª–∞ –≤ –±–æ—é... –ü–∞—É–∫ –ø–æ–±–µ–¥–∏–ª. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≤–∞–Ω—à–∞.")
        await update.message.reply_text("\n".join(text_lines), parse_mode=ParseMode.MARKDOWN)
        await save_state()
        return

    # –°—Ç–∞—Ç—É—Å
    text_lines.append(
        f"‚ù§Ô∏è –ü–∞—É–∫: {state['boss_hp']}/{state['boss_max_hp']} | "
        f"‚ù§Ô∏è –ö–æ–º–∞–Ω–¥–∞: {state['players_hp']}/{state['players_max_hp']} | "
        f"üõ° –©–∏—Ç—ã: {state['shields']}"
    )
    await update.message.reply_text("\n".join(text_lines), parse_mode=ParseMode.MARKDOWN)
    await save_state()

# ==========
# –ò–≥—Ä–æ–∫: üî• –ü–ª–∞–º—è
# ==========
async def handle_flame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = games.get(chat_id)
    if not state or not state.get("active"):
        await update.message.reply_text("–ë–æ–π –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    if state["special_charges"] <= 0:
        await update.message.reply_text("–°–ø–µ—Ü-–∞—Ç–∞–∫–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞!")
        return

    user = update.effective_user
    user_name = user.first_name or "–ò–≥—Ä–æ–∫"
    state["special_charges"] -= 1

    damage = FLAME_DAMAGE
    state["boss_hp"] = max(0, state["boss_hp"] - damage)

    state["damage_by_user"][user.id] = state["damage_by_user"].get(user.id, 0) + damage
    state["user_names"][user.id] = user_name

    text_lines = [f"üî• *{user_name}* –≤—ã–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–º—è –∏ –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞ –ü–∞—É–∫—É!"]

    if state["boss_hp"] <= 0:
        await announce_victory(update, state, text_lines)
        await save_state()
        return

    await boss_turn(state, text_lines)

    if state["players_hp"] <= 0:
        state["players_hp"] = 0
        state["active"] = False
        text_lines.append("‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø–∞–ª–∞... –ü–∞—É–∫ –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≤–∞–Ω—à–∞.")
        await update.message.reply_text("\n".join(text_lines), parse_mode=ParseMode.MARKDOWN)
        await save_state()
        return

    text_lines.append(
        f"‚ù§Ô∏è –ü–∞—É–∫: {state['boss_hp']}/{state['boss_max_hp']} | "
        f"‚ù§Ô∏è –ö–æ–º–∞–Ω–¥–∞: {state['players_hp']}/{state['players_max_hp']} | "
        f"üõ° –©–∏—Ç—ã: {state['shields']}"
    )
    await update.message.reply_text("\n".join(text_lines), parse_mode=ParseMode.MARKDOWN)
    await save_state()

# ==========
# –ò–≥—Ä–æ–∫: ‚ö° –ú–æ–ª–Ω–∏—è (–æ–≥–ª—É—à–µ–Ω–∏–µ)
# ==========
async def handle_lightning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = games.get(chat_id)
    if not state or not state.get("active"):
        await update.message.reply_text("–ë–æ–π –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    if state["special_charges"] <= 0:
        await update.message.reply_text("–°–ø–µ—Ü-–∞—Ç–∞–∫–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞!")
        return

    user = update.effective_user
    user_name = user.first_name or "–ò–≥—Ä–æ–∫"
    state["special_charges"] -= 1

    damage = LIGHTNING_DAMAGE
    state["boss_hp"] = max(0, state["boss_hp"] - damage)

    state["damage_by_user"][user.id] = state["damage_by_user"].get(user.id, 0) + damage
    state["user_names"][user.id] = user_name

    # –æ–≥–ª—É—à–µ–Ω–∏–µ –Ω–∞ –æ–¥–∏–Ω —Ö–æ–¥
    state["boss_skip"] = True

    text_lines = [f"‚ö° *{user_name}* –ø–æ—Ä–∞–∂–∞–µ—Ç –º–æ–ª–Ω–∏–µ–π: {damage} —É—Ä–æ–Ω–∞ –∏ –æ–≥–ª—É—à–µ–Ω–∏–µ!"]

    if state["boss_hp"] <= 0:
        await announce_victory(update, state, text_lines)
        await save_state()
        return

    text_lines.append("üòµ –ü–∞—É–∫ –æ–≥–ª—É—à–µ–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥!")
    text_lines.append(
        f"‚ù§Ô∏è –ü–∞—É–∫: {state['boss_hp']}/{state['boss_max_hp']} | "
        f"‚ù§Ô∏è –ö–æ–º–∞–Ω–¥–∞: {state['players_hp']}/{state['players_max_hp']} | "
        f"üõ° –©–∏—Ç—ã: {state['shields']}"
    )
    await update.message.reply_text("\n".join(text_lines), parse_mode=ParseMode.MARKDOWN)
    await save_state()

# ==========
# –ò–≥—Ä–æ–∫: üõ° –©–∏—Ç (–Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —â–∏—Ç—ã)
# ==========
async def handle_shield(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = games.get(chat_id)
    if not state or not state.get("active"):
        await update.message.reply_text("–ë–æ–π –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    if state["special_charges"] <= 0:
        await update.message.reply_text("–°–ø–µ—Ü-–∞—Ç–∞–∫–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞!")
        return

    user = update.effective_user
    user_name = user.first_name or "–ò–≥—Ä–æ–∫"
    state["special_charges"] -= 1

    state["shields"] += SHIELD_GAIN
    text_lines = [f"üõ° *{user_name}* –ø—Ä–∏–∑—ã–≤–∞–µ—Ç —â–∏—Ç! –©–∏—Ç—ã +{SHIELD_GAIN} (–∏—Ç–æ–≥–æ: {state['shields']})."]

    await boss_turn(state, text_lines)

    if state["players_hp"] <= 0:
        state["players_hp"] = 0
        state["active"] = False
        text_lines.append("‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø–∞–ª–∞... –ü–∞—É–∫ –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
        await update.message.reply_text("\n".join(text_lines), parse_mode=ParseMode.MARKDOWN)
        await save_state()
        return

    text_lines.append(
        f"‚ù§Ô∏è –ü–∞—É–∫: {state['boss_hp']}/{state['boss_max_hp']} | "
        f"‚ù§Ô∏è –ö–æ–º–∞–Ω–¥–∞: {state['players_hp']}/{state['players_max_hp']} | "
        f"üõ° –©–∏—Ç—ã: {state['shields']}"
    )
    await update.message.reply_text("\n".join(text_lines), parse_mode=ParseMode.MARKDOWN)
    await save_state()

# =========================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø
# =========================
async def announce_victory(update: Update, state: dict, text_lines: list[str]):
    """–°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–±–µ–¥–µ, MVP –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–æ–π."""
    text_lines[-1] += " –ü–∞—É–∫ –ø–æ–≤–µ—Ä–∂–µ–Ω!"
    state["active"] = False

    if state["damage_by_user"]:
        mvp_id = max(state["damage_by_user"], key=lambda uid: state["damage_by_user"][uid])
        mvp_damage = state["damage_by_user"][mvp_id]
        mvp_name = state["user_names"].get(mvp_id, "–ò–≥—Ä–æ–∫")
    else:
        mvp_id = None
        mvp_damage = 0
        mvp_name = ""

    reward_text = "üéÉ +50, üç¨ +25"
    text_lines.append(f"üèÜ *–ü–æ–±–µ–¥–∞!* –ù–∞–≥—Ä–∞–¥–∞: {reward_text}.")
    if mvp_id:
        text_lines.append(f"‚≠ê –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —É—Ä–æ–Ω–∞ –Ω–∞–Ω—ë—Å *{mvp_name}* ‚Äî {mvp_damage}.")

    await update.message.reply_text("\n".join(text_lines), parse_mode=ParseMode.MARKDOWN)

async def boss_turn(state: dict, text_lines: list[str]):
    """–•–æ–¥ –±–æ—Å—Å–∞: –æ–±—ã—á–Ω–∞—è/—Å–ø–µ—Ü –∞—Ç–∞–∫–∞, –≤–ª–∏—è–Ω–∏–µ —â–∏—Ç–æ–≤/–æ–≥–ª—É—à–µ–Ω–∏—è."""
    if state.get("boss_skip"):
        text_lines.append("üòµ –ü–∞—É–∫ –æ–≥–ª—É—à–µ–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ—é –∞—Ç–∞–∫—É!")
        state["boss_skip"] = False
        return

    state["boss_actions_count"] += 1
    if state["boss_actions_count"] % 4 == 0:
        # —Å–ø–µ—Ü-–∞—Ç–∞–∫–∞ –±–æ—Å—Å–∞
        damage_to_players = BOSS_SPECIAL_DAMAGE
        desc = "üï∑Ô∏è –ü–∞—É–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç *—è–¥–æ–≤–∏—Ç—ã–π —É–∫—É—Å*!"
        if state["shields"] > 0:
            damage_to_players //= 2
            desc += " –©–∏—Ç—ã —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–≥–ª–æ—â–∞—é—Ç —É—Ä–æ–Ω, –Ω–æ —Ä–∞—Å—Å—ã–ø–∞–ª–∏—Å—å!"
            state["shields"] = 0
        else:
            desc += f" –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç {damage_to_players} —É—Ä–æ–Ω–∞."
        state["players_hp"] = max(0, state["players_hp"] - damage_to_players)
        text_lines.append(desc)
    else:
        # –æ–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞ –±–æ—Å—Å–∞
        damage_to_players = BOSS_NORMAL_DAMAGE
        desc = "üï∑Ô∏è –ü–∞—É–∫ –∞—Ç–∞–∫—É–µ—Ç –∫–æ–º–∞–Ω–¥—É."
        if state["shields"] > 0:
            state["shields"] -= 1
            desc += " –©–∏—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç —É–¥–∞—Ä!"
            if state["shields"] > 0:
                desc += f" (–©–∏—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {state['shields']})"
            else:
                desc += " (–©–∏—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç)"
            damage_to_players = 0
        else:
            desc += f" –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç {damage_to_players} —É—Ä–æ–Ω–∞."
        if damage_to_players > 0:
            state["players_hp"] = max(0, state["players_hp"] - damage_to_players)
        text_lines.append(desc)

# =========================
# MAIN
# =========================
def main():
    load_state_from_disk()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("attack", handle_attack))
    app.add_handler(CommandHandler("flame", handle_flame))
    app.add_handler(CommandHandler("lightning", handle_lightning))
    app.add_handler(CommandHandler("shield", handle_shield))

    # –≠–º–æ–¥–∑–∏-—Ç—Ä–∏–≥–≥–µ—Ä—ã
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^üí•$"), handle_attack))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^üî•$"), handle_flame))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^‚ö°$"), handle_lightning))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^üõ°$"), handle_shield))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ —Ä–µ–π–¥—É!")
    app.run_polling()

if __name__ == "__main__":
    main()
